// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../axios

declare module '@voximplant/kit-functions-sdk' {
    import { CallObject, ContextObject, QueueInfo, SkillObject, MessageObject, DataBaseType, ObjectType } from "@voximplant/kit-functions-sdk/types";
    class VoximplantKit {
            /**
                * The class VoximplantKit is a middleware for working with functions
                * ```js
                * module.exports = async function(context, callback) {
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  // Some code
                *  console.log(Date.now());
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                *}
                * ```
                */
            constructor(context: ContextObject);
            /**
                * @hidden
                */
            static default: typeof VoximplantKit;
            /**
                * load Databases
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  try {
                *    // Connecting the internal database
                *    await kit.loadDatabases();
                *    // Reading contents from global scope
                *    const global_scope = kit.dbGetAll('global');
                *    console.log(global_scope)
                *  } catch(err) {
                *    console.log(err);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            loadDatabases(): Promise<void>;
            /**
                * Get function response
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                * @param data
                */
            getResponseBody(data: any): any;
            /**
                * Get incoming message (Read only)
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  // Checking that the function is called from a channel
                *  if (kit.isMessage()) {
                *    // Getting text from an incoming message
                *    const message = kit.getIncomingMessage();
                *    console.log(message.text);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            getIncomingMessage(): MessageObject | null;
            /**
                * Set the response text to an incoming message
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  // Checking that the function is called from a channel
                *  if (kit.isMessage()) {
                *    // Getting text from an incoming message
                *    const message = kit.getIncomingMessage();
                *    console.log(message.text);
                *    // Set the response text
                *    kit.setReplyMessageText('you wrote ' + message.text);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            setReplyMessageText(text: string): boolean;
            /**
                * The function was called from a call
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  if (kit.isCall()) {
                *    console.log('This function is called from the call')
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            isCall(): boolean;
            /**
                * The function was called from a message
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  if (kit.isMessage()) {
                *    console.log('This function is called from the channel');
                *    const message = kit.getIncomingMessage();
                *    //...
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            isMessage(): boolean;
            /**
                * Get Variable
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  const my_var = kit.getVariable('my_var');
                *  if (my_var) {
                *    console.log(my_var);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            getVariable(name: string): string | null;
            /**
                * Set variable
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  kit.setVariable('my_var', 'some_value');
                *  console.log(kit.getVariable('my_var'));
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                * @param name {String} - Variable name
                * @param value {String} - Variable value
                */
            setVariable(name: string, value: string): boolean;
            /**
                * Delete variable
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  kit.deleteVariable('my_var');
                *  // The console will write null
                *  console.log(kit.getVariable('my_var'));
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                * @param name {String} - Variable name
                */
            deleteVariable(name: string): void;
            /**
                * Get call headers
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  if (kit.isCall()) {
                *    const headers = kit.getCallHeaders();
                *    console.log(headers);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            getCallHeaders(): ObjectType | null;
            /**
                * Get all call data
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  if (kit.isCall()) {
                *    const call = kit.getCallData();
                *    // Get the phone from which the call was made
                *    console.log(call.phone_a);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            getCallData(): CallObject | null;
            /**
                * Get all variables
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  const all_vars = kit.getVariables();
                *  console.log(all_vars);
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            getVariables(): ObjectType;
            /**
                * Get all skills
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  if (this.isCall()) {
                *    const all_skills = kit.getSkills();
                *    console.log('All skills:', all_skills);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            getSkills(): SkillObject[];
            /**
                * Set skill
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  if (this.isCall()) {
                *    kit.setSkill('some_skill_name', 5);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                * @param name
                * @param level
                */
            setSkill(name: string, level: number): boolean;
            /**
                * Remove skill
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  if (this.isCall()) {
                *    kit.removeSkill('some_skill_name');
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            removeSkill(name: string): boolean;
            /**
                * Set the priority of the call. The higher the priority, the less time the client will wait for the operator's answer.
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  // Transfer to queue by name some_queue_name
                *  kit.transferToQueue({queue_id: null, queue_name: 'some_queue_name'});
                *  // Set the maximum priority
                *  kit.setPriority(10);
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            setPriority(value: number): boolean;
            /**
                * Get call priority
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  // Returns a number from 0 to 10
                *  const priority = kit.getPriority();
                *  if (priority === 10) {
                *    // Something to do
                *  } else if (priority === 5) {
                *    // Something to do
                *  } else {
                *    // Something to do
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            getPriority(): number;
            /**
                * Finish current request in conversation
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  if (this.isMessage()) {
                *    kit.finishRequest();
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            finishRequest(): boolean;
            /**
                * Cancel finish current request in conversation
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  if (this.isMessage()) {
                *    kit.finishRequest();
                *  }
                *  // ...
                *  // Some condition for cancellation finishRequest
                *  const shouldCancel = true;
                *  if (shouldCancel) {
                *    kit.cancelFinishRequest();
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            cancelFinishRequest(): boolean;
            /**
                * Transfer to queue
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  // Transfer to queue by name some_queue_name
                *  kit.transferToQueue({queue_id: null, queue_name: 'some_queue_name'});
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            transferToQueue(queue: QueueInfo): boolean;
            /**
                * Cancel transfer to queue
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  // Transfer to queue by name some_queue_name
                *  kit.transferToQueue({queue_id: null, queue_name: 'some_queue_name'});
                *  //...
                *  // Some condition for cancellation transfer to queue
                *  const shouldCancel = true;
                *  if (shouldCancel) {
                *    kit.cancelTransferToQueue();
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            cancelTransferToQueue(): boolean;
            /**
                * Get value from DB by key
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  try {
                *    // Connecting the internal database
                *    await kit.loadDatabases();
                *    // Get the value from the function scope by the test_key key
                *    const _test = kit.dbGet('test_key', 'function')
                *    console.log(_test);
                *  } catch(err) {
                *    console.log(err);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            dbGet(key: string, scope?: DataBaseType): string | null;
            /**
                * Set value in DB by key
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  try {
                *    // Connecting the internal database
                *    await kit.loadDatabases();
                *    // Get the value from the function scope by the test_key key
                *    const _test = kit.dbGet('test_key', 'function')
                *    // If there is no data, then we write it down
                *    if (_test === null) {
                *      kit.dbSet('test_key', 'Hello world!!!', 'function');
                *    }
                *    // Writing changes to the database
                *    kit.dbCommit()
                *  } catch(err) {
                *    console.log(err);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            dbSet(key: string, value: any, scope?: DataBaseType): boolean;
            /**
                * Get all DB scope by name
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  try {
                *    // Connecting the internal database
                *    await kit.loadDatabases();
                *    // Reading contents from global scope
                *    const global_scope = kit.dbGetAll('global');
                *    console.log(global_scope)
                *  } catch(err) {
                *    console.log(err);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            dbGetAll(scope?: DataBaseType): ObjectType | null;
            /**
                * Commit DB changes
                * ```js
                *  // Initializing a VoximplantKit instance
                *  const kit = new VoximplantKit(context);
                *  try {
                *    // Connecting the internal database
                *    await kit.loadDatabases();
                *    // Get the value from the function scope by the test_key key
                *    const _test = kit.dbGet('test_key', 'function')
                *    // If there is no data, then we write it down
                *    if (_test === null) {
                *      kit.dbSet('test_key', 'Hello world!!!', 'function');
                *    }
                *    // Writing changes to the database
                *    kit.dbCommit()
                *  } catch(err) {
                *    console.log(err);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            dbCommit(): Promise<boolean>;
            /**
                * Voximplant Kit API proxy
                * ```js
                * // Example of getting an account name
                *  const kit = new VoximplantKit(context);
                *  try {
                *     const { success, result } = await kit.apiProxy('/v2/account/getAccountInfo');
                *     if (success) {
                *        console.log('Account name', result.domain.name);
                *     }
                *  } catch (err) {
                *     console.log(err);
                *  }
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                * @param url {string} - Url address
                * @param data
                */
            apiProxy(url: string, data: any): Promise<unknown>;
            /**
                * Get client version
                * ```js
                *  const kit = new VoximplantKit(context);
                *  // Get client version
                *  kit.version();
                *  // End of function work
                *  callback(200, kit.getResponseBody());
                * ```
                */
            version(): string;
    }
    export = VoximplantKit;
}

declare module '@voximplant/kit-functions-sdk/types' {
    import { AxiosResponse } from "axios";
    export interface CallObject {
            id: number;
            /**
                * @hidden
                */
            result_code: number;
            attempt_num: number;
            session_id: string;
            callerid: string;
            destination: string;
            display_name: string;
            phone_a: string;
            phone_b: string;
            record_url: string;
    }
    /**
        * @hidden
        */
    export interface ContextObject {
            request: RequestObject;
    }
    /**
        * @hidden
        */
    export interface RequestObject {
            body: RequestData;
            headers: ObjectType;
    }
    /**
        * @hidden
        */
    export type RequestData = RequestObjectCallBody | MessageObject | ObjectType;
    /**
        * @hidden
        */
    export interface RequestObjectCallBody {
            CALL: CallObject;
            SKILLS: SkillObject[];
            VARIABLES: ObjectType;
            HEADERS: ObjectType;
    }
    export interface SkillObject {
            skill_name: string;
            level: number;
    }
    export interface MessageObject {
            id: number;
            text: string;
            /**
                * @hidden
                */
            type: string;
            sender: MessageSender;
            conversation: MessageConversation;
            /**
                * @hidden
                */
            payload: Array<MessagePayloadItem>;
            customer: MessageCustomer;
            /**
                * @hidden
                */
            HasMedia: boolean;
    }
    export interface MessageConversation {
            id: number;
            /**
                * @hidden
                */
            uuid: string;
            client_id: string;
            custom_data: ConversationCustomDataObject;
            current_status: string;
            current_request: IncomingRequestObject;
            channel: MessageConversationChannel;
            /**
                * @hidden
                */
            customer_id?: number;
    }
    export interface MessageConversationChannel {
            id: number;
            channel_uuid: string;
            account: object;
            channel_type: ChannelType;
            channel_settings: object;
            processing_method: string;
            processing_queue: object;
            processing_function: number;
            partner_id: number;
            access_token: string;
    }
    export interface ConversationCustomDataObject {
            client_data: ConversationCustomDataClientDataObject;
            conversation_data: ConversationCustomDataConversationDataObject;
            request_data: ConversationCustomDataRequestData;
            customer_data?: {
                    id: number;
            };
    }
    export interface ConversationCustomDataRequestData {
            id: number;
            conversation_id: number;
            start_sequence: number;
            end_sequence: any;
            start_time: number;
            handling_start_time: number;
            end_time: number;
            completed: boolean;
            variables: ObjectType;
    }
    export interface ConversationCustomDataClientDataObject {
            client_id: string;
            client_phone: string;
            client_avatar: string;
            client_display_name: string;
    }
    export interface ConversationCustomDataConversationDataObject {
            last_message_text: string;
            last_message_time: number;
            channel_type: string;
            last_message_sender_type: string;
            is_read: boolean;
    }
    export interface QueueInfo {
            queue_id: number;
            queue_name: string;
    }
    export interface MessageCustomer {
            id: number;
            customer_display_name: string;
            customer_details: string;
            customer_photo: string;
            customer_phones: string[];
            customer_client_ids: MessageCustomerClientIds[];
            customer_external_id: string;
            customer_emails: string[];
    }
    export interface MessageCustomerClientIds {
            client_id: string;
            client_type: string;
    }
    export interface IncomingRequestObject {
            id: number;
            conversation_id: number;
            /**
                * @hidden
                */
            start_sequence: number;
            /**
                * @hidden
                */
            end_sequence: number;
            start_time: number;
            handling_start_time: number;
            end_time: number;
            completed: boolean;
    }
    export interface MessageSender {
            is_bot: boolean;
    }
    /**
        * TODO add methods to get properties
        * @hidden
        */
    export interface MessagePayloadItem {
            type: string;
            message_type?: string;
            name?: string;
            queue?: QueueInfo;
            skills?: Array<SkillObject>;
            priority?: number;
            text?: string;
            url?: string;
            latitude?: number;
            longitude?: number;
            address?: string;
            keys?: any;
            file_name?: string;
            file_size?: number;
    }
    export interface DataBase {
            function: ObjectType;
            global: ObjectType;
            conversation: ObjectType;
    }
    export type DataBaseType = 'function' | 'global' | 'conversation';
    export type ChannelType = 'telegram' | 'whatsapp-edna' | 'viber' | 'sms' | 'facebook' | 'vk' | 'odnoklassniki' | 'custom' | 'webchat';
    /**
        * @hidden
        */
    export interface ApiInstance {
            request<T, R = AxiosResponse<T>>(requestUrl: string, data: any): Promise<R>;
    }
    export type DbResponse = {
            result: string;
    };
    export type ObjectType = {
            [key: string]: string;
    };
}

